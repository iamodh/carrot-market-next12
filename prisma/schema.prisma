// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  phone String? @unique
  email String? @unique
  name String
  avatar String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tokens Token[]
  products Product[]
  fav Fav[]
  posts Post[]
  answers Answer[]
  interests Interest[]
}

model Token {
  id Int @id @default(autoincrement())
  payload String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  image String
  name String
  price Int
  description String 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  favs Fav[]
}

model Fav {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  question String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  latitude Float?
  longitude Float?
  answers Answer[]
  interests Interest[]
}

model Answer {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  answer String
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Interest {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
   post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
 createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}